package com.example.b07demosummer2024;

/**
 * {ContactInfo} represents an individual emergency contact’s data.
 * It includes a unique ID (generated by Firebase), the contact’s name,
 * relationship to the user, phone number, and address.  This POJO is used
 * for reading from and writing to Firebase Realtime Database.
 */

public class ContactInfo {

    /** Unique key assigned by Firebase for this contact entry. */
    private String id;

    /** Contact’s basic information. */
    private String name;
    private String relationship;
    private String phone;
    private String address;

    /**
     * Default no-argument constructor required by Firebase for data mapping.
     */
    public ContactInfo() {}

    /**
     * Constructs a new {ContactInfo} with the specified details.
     *
     * @param name          the contact’s name
     * @param relationship  the nature of the relationship
     * @param phone         the contact’s phone number
     * @param address       the contact’s address
     */
    public ContactInfo(String name, String relationship, String phone, String address) {
        this.name = name;
        this.relationship = relationship;
        this.phone = phone;
        this.address = address;
    }

    // --- ID Methods ---
    /**
     * Returns the Firebase-generated unique ID for this contact.
     *
     * @return the contact’s ID, or null if not yet assigned
     */
    public String getId() { return id; }
    /**
     * Sets the unique ID for this contact.  Called when reading snapshots
     * from Firebase to store the database key.
     *
     * @param id the key under which this contact is stored
     */
    public void setId(String id) { this.id = id; }

    // --- Name Methods ---
    /**
     * Returns the contact’s full name.
     *
     * @return the name string
     */
    public String getName() { return name; }
    /**
     * Updates the contact’s name.
     *
     * @param name the new name
     */
    public void setName(String name) { this.name = name; }

    // --- Relationship Methods ---
    /**
     * Returns the relationship label (e.g. “Friend”, “Sibling”).
     *
     * @return the relationship string
     */
    public String getRelationship() { return relationship; }
    /**
     * Updates the relationship label.
     *
     * @param relationship the new relationship description
     */
    public void setRelationship(String relationship) { this.relationship = relationship; }

    // --- Phone Methods ---
    /**
     * Returns the contact’s phone number.
     *
     * @return the phone string
     */
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    // --- Address Methods ---
    /**
     * Returns the contact’s postal or street address.
     *
     * @return the address string, or empty if none provided
     */
    public String getAddress() { return address; }
    /**
     * Updates the contact’s address.
     *
     * @param address the new address string
     */
    public void setAddress(String address) { this.address = address; }
}

